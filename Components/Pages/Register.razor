@using Blazor

@page "/register"
@rendermode InteractiveServer
@inject ApplicationDbContext DbContext
@inject SharedStateService StateService
@inject NavigationManager NavigationManager

@using Microsoft.EntityFrameworkCore;

<PageTitle>Account</PageTitle>

@if (StateService.Account.Username != "Guest")
{
    <div class="account-info">
        <p><strong>Username:</strong> @StateService.Account.Username</p>
        <button class="btn logout-btn" @onclick="Logout">Logout</button>
    </div>
}
else
{
    <div class="form-container">
        <div class="form-box">
            <h3>Register</h3>
            <EditForm Model="NewClient" OnValidSubmit="HandleValidSubmit" class="form">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="username">Username:</label>
                    <InputText id="username" @bind-Value="NewClient.Username" class="input-field" />
                </div>
                <div class="form-group">
                    <label for="password">Password:</label>
                    <InputText id="password" @bind-Value="NewClient.Password" class="input-field" Type="password" />
                </div>

                <button type="submit" class="btn">Register</button>
            </EditForm>
        </div>

        <div class="form-box">
            <h3>Login</h3>
            <EditForm EditContext="LoginEditContext" OnValidSubmit="Login" class="form">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="login-username">Username:</label>
                    <InputText id="login-username" @bind-Value="LoginUsername" class="input-field" />
                </div>
                <div class="form-group">
                    <label for="login-password">Password:</label>
                    <InputText id="login-password" @bind-Value="LoginPassword" InputType="password" class="input-field" Type="password" />
                </div>

                <button type="submit" class="btn">Login</button>
            </EditForm>
        </div>
    </div>

    <p class="validation-message">@ValidationMessage</p>
}

<style>
    /* Centering content */
    .form-container {
        display: flex;
        justify-content: center;
        align-items: flex-start;
        flex-wrap: wrap;
        gap: 20px;
        margin-top: 20px;
    }

    .form-box {
        display: flex;
        flex-direction: column;
        padding: 20px;
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        width: 350px;
    }

    .form {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .form-group {
        display: flex;
        flex-direction: column;
    }

    .input-field {
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 16px;
    }

    .btn {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 10px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        transition: background 0.3s ease;
    }

        .btn:hover {
            background-color: #0056b3;
        }

    .logout-btn {
        background-color: #dc3545;
        margin-top: 10px;
    }

        .logout-btn:hover {
            background-color: #c82333;
        }

    .validation-message {
        color: red;
        font-weight: bold;
        text-align: center;
        margin-top: 10px;
    }

</style>

@code {
    private List<Client> Clients = new();
    private Client NewClient = new Client();

    private string LoginUsername { get; set; } = string.Empty;
    private string LoginPassword { get; set; } = string.Empty;
    private string ValidationMessage = string.Empty;

    private EditContext LoginEditContext;

    protected override async Task OnInitializedAsync()
    {
        LoginEditContext = new EditContext(this);
        Clients = await DbContext.Clients.ToListAsync();
    }

    private async Task HandleValidSubmit()
    {
        NewClient.Password = BCrypt.Net.BCrypt.HashPassword(NewClient.Password);

        DbContext.Clients.Add(NewClient);
        await DbContext.SaveChangesAsync();
        Clients = await DbContext.Clients.ToListAsync();
        NewClient = new Client();
    }

    private async Task Login()
    {
        var client = await DbContext.Clients.FirstOrDefaultAsync(c => c.Username == LoginUsername);

        if (client == null)
        {
            ValidationMessage = "Username not found.";
        }
        else if (!BCrypt.Net.BCrypt.Verify(LoginPassword, client.Password))
        {
            ValidationMessage = "Invalid password.";
        }
        else
        {
            ValidationMessage = $"Welcome, {client.Username}!";
            StateService.Account = client;
            NavigationManager.NavigateTo(NavigationManager.Uri, true);
        }
    }

    private void Logout()
    {
        StateService.Account = new Client { Username = "Guest" };
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }
}
